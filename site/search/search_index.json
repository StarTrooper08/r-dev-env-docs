{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"R Dev Container A containerised development environment for editing and compiling the R source code. The environment contains the VSCode IDE and tools needed to compile R. Getting started You can run this environment on GitHub using codespaces Codespaces Click on the 'Open in GitHub Codespaces' button and then click the green 'Create Codespace' button. You will see the message \"Codespace usage for this repository is paid for by ...\", with your username. Don't panic! Note : Github Codespaces offers 120 core hours of free usage per month for every Github user. So the actual number of free hours is 120 divided by the number of cores you are using to run your codespaces. Here for the R-dev-env codespace we have set the codespace usage to 4 cores which leads to 30hrs of free usage per month. And it can also be changed according to your preference. For more details about codespaces billing, see the Codespaces Billing Docs . You can calculate your GitHub services usage with the GitHub Services Pricing Calculator and check your usage allowance under \"Codespaces\" on https://github.com/settings/billing. The codespace setup screen will then be shown. Starting the container may take a minute or so. You will be taken to a VSCode editor within your browser. Running R Create a file in VS Code ending with a .R extension. You can create new files by clicking on the new file icon in VS Code. Open the file by clicking on the filename. You should see R:(not attached) in the bottom bar. Click on the R:(not attached) button to launch R in the terminal. You can then send code from the .R file to the R terminal by pressing cmd/ctrl + enter. R Contribution Workflow Build Setup Environment Variables We have environment variables for setting the paths for building R and storing the source code. The path ENV variable for R Build and R Source code are BUILDDIR and TOP_SRCDIR respectively. The environment variables are set in the codespace image and are available when the codespace starts. 2. svn checkout - The svn checkout cmd lets us create working of a repository with specific tag/branch. - Example: bash svn checkout https://svn.r-project.org/R/trunk/ \"$TOP_SRCDIR\" - Output : We get file structure something like this after checking out R source code from R svn repository. cd to BUILDDIR We need to change our directory to R build directory(BUILDDIR) to build and configure our R source code. First we will create a directory using env var BUILDDIR. bash mkdir -p $BUILDDIR Then we can change directory from root to $BUILDDIR one. bash cd $BUILDDIR configure source code After we change directory to BUILDDIR we can configure and build R. CMD bash \"$TOP_SRCDIR/configure\" --enable-R-shlib --without-recommended-packages make sudo make install The configure cmd prepares for building R, creating files and folders inside the BUILDDIR directory. Output : We get file structure something like this after using configure command. After having built the current development version of R, we can now make changes in source code and make our contributions. Contribution Workflow Example Contribution Workflow using DevContainer: To start working in R we will click on R:(not attach) option which is in the bottom right of our R-dev codespace. It will open R terminal for us. We can now run R commands. We will use the utils::askYesNo() function as an example ```R askYesNo(\"Is this a good example?\") Is this a good example? (Yes/no/cancel) Yes [1] TRUE `` 2. Edit the source code of utils::askYesNo() to change the default options. The source code can be found in $TOP_SRCDIR/src/library/utils/R/askYesNo.R`. Before edit: R prompts = getOption(\"askYesNo\", gettext(c(\"Yes\", \"No\", \"Cancel\"))), With edit (for example - change to whatever you like!): R prompts = getOption(\"askYesNo\", gettext(c(\"Oh yeah!\", \"Don't think so\", \"Cancel\"))), 3. Re-build the utils package (we only need to re-build the part we have modified). We can rebuild the package by following simple steps - First we need to be inside $BUILDDIR, for that we can change directory to cd $BUILDDIR . - After that we can run cmd make and sudo make install in a series. This will re-build any parts of R that have changed, in this case only re-building the utils package, then re-install R. If we open a new R terminal we will see our changes getting reflected. Check the edit has worked as expected by re-running the example code: ```R askYesNo(\"Is this a good example?\") Is this a good example? (Oh yeah!/don't think so/cancel) Oh yeah! [1] TRUE ``` Useful Links R in Visual Studio code VSCode R Wiki Getting started with Dev Containers Install Docker Desktop Installing Docker on Linux Dev Container Documentation","title":"R Dev Container"},{"location":"#r-dev-container","text":"A containerised development environment for editing and compiling the R source code. The environment contains the VSCode IDE and tools needed to compile R.","title":"R Dev Container"},{"location":"#getting-started","text":"You can run this environment on GitHub using codespaces","title":"Getting started"},{"location":"#codespaces","text":"Click on the 'Open in GitHub Codespaces' button and then click the green 'Create Codespace' button. You will see the message \"Codespace usage for this repository is paid for by ...\", with your username. Don't panic! Note : Github Codespaces offers 120 core hours of free usage per month for every Github user. So the actual number of free hours is 120 divided by the number of cores you are using to run your codespaces. Here for the R-dev-env codespace we have set the codespace usage to 4 cores which leads to 30hrs of free usage per month. And it can also be changed according to your preference. For more details about codespaces billing, see the Codespaces Billing Docs . You can calculate your GitHub services usage with the GitHub Services Pricing Calculator and check your usage allowance under \"Codespaces\" on https://github.com/settings/billing. The codespace setup screen will then be shown. Starting the container may take a minute or so. You will be taken to a VSCode editor within your browser.","title":"Codespaces"},{"location":"#running-r","text":"Create a file in VS Code ending with a .R extension. You can create new files by clicking on the new file icon in VS Code. Open the file by clicking on the filename. You should see R:(not attached) in the bottom bar. Click on the R:(not attached) button to launch R in the terminal. You can then send code from the .R file to the R terminal by pressing cmd/ctrl + enter.","title":"Running R"},{"location":"#r-contribution-workflow","text":"","title":"R Contribution Workflow"},{"location":"#build-setup","text":"Environment Variables We have environment variables for setting the paths for building R and storing the source code. The path ENV variable for R Build and R Source code are BUILDDIR and TOP_SRCDIR respectively. The environment variables are set in the codespace image and are available when the codespace starts. 2. svn checkout - The svn checkout cmd lets us create working of a repository with specific tag/branch. - Example: bash svn checkout https://svn.r-project.org/R/trunk/ \"$TOP_SRCDIR\" - Output : We get file structure something like this after checking out R source code from R svn repository. cd to BUILDDIR We need to change our directory to R build directory(BUILDDIR) to build and configure our R source code. First we will create a directory using env var BUILDDIR. bash mkdir -p $BUILDDIR Then we can change directory from root to $BUILDDIR one. bash cd $BUILDDIR configure source code After we change directory to BUILDDIR we can configure and build R. CMD bash \"$TOP_SRCDIR/configure\" --enable-R-shlib --without-recommended-packages make sudo make install The configure cmd prepares for building R, creating files and folders inside the BUILDDIR directory. Output : We get file structure something like this after using configure command. After having built the current development version of R, we can now make changes in source code and make our contributions.","title":"Build Setup"},{"location":"#contribution-workflow","text":"Example Contribution Workflow using DevContainer: To start working in R we will click on R:(not attach) option which is in the bottom right of our R-dev codespace. It will open R terminal for us. We can now run R commands. We will use the utils::askYesNo() function as an example ```R askYesNo(\"Is this a good example?\") Is this a good example? (Yes/no/cancel) Yes [1] TRUE `` 2. Edit the source code of utils::askYesNo() to change the default options. The source code can be found in $TOP_SRCDIR/src/library/utils/R/askYesNo.R`. Before edit: R prompts = getOption(\"askYesNo\", gettext(c(\"Yes\", \"No\", \"Cancel\"))), With edit (for example - change to whatever you like!): R prompts = getOption(\"askYesNo\", gettext(c(\"Oh yeah!\", \"Don't think so\", \"Cancel\"))), 3. Re-build the utils package (we only need to re-build the part we have modified). We can rebuild the package by following simple steps - First we need to be inside $BUILDDIR, for that we can change directory to cd $BUILDDIR . - After that we can run cmd make and sudo make install in a series. This will re-build any parts of R that have changed, in this case only re-building the utils package, then re-install R. If we open a new R terminal we will see our changes getting reflected. Check the edit has worked as expected by re-running the example code: ```R askYesNo(\"Is this a good example?\") Is this a good example? (Oh yeah!/don't think so/cancel) Oh yeah! [1] TRUE ```","title":"Contribution Workflow"},{"location":"#useful-links","text":"R in Visual Studio code VSCode R Wiki Getting started with Dev Containers Install Docker Desktop Installing Docker on Linux Dev Container Documentation","title":"Useful Links"}]}